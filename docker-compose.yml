services:
  postgres:
    image: postgres:15-alpine
    container_name: fleet_postgres
    environment:
      POSTGRES_DB: fleet_db
      POSTGRES_USER: fleet_admin
      POSTGRES_PASSWORD: fleet_pass
    ports:
      - "5433:5432"
    volumes:
      - ./internal/database/migrations.sql:/docker-entrypoint-initdb.d/01-init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fleet_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_admin -d fleet_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: fleet_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - fleet_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mosquitto:
    image: eclipse-mosquitto:2.0.18
    container_name: fleet_mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    networks:
      - fleet_network
    command: mosquitto -c /mosquitto-no-auth.conf 

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: fleet_api
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: fleet_admin
      DB_PASSWORD: fleet_pass
      DB_NAME: fleet_db
      PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fleet_network
    restart: unless-stopped

  mqtt-subscriber:
    build:
      context: .
      dockerfile: Dockerfile
      target: mqtt-subscriber
    container_name: fleet_mqtt_subscriber
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: fleet_admin
      DB_PASSWORD: fleet_pass
      DB_NAME: fleet_db
      MQTT_BROKER: tcp://mosquitto:1883
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mosquitto:
        condition: service_started
    networks:
      - fleet_network
    restart: unless-stopped

  geofence-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: geofence-worker
    container_name: fleet_geofence_worker
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fleet_network
    restart: unless-stopped

  mock-publisher:
    build:
      context: .
      dockerfile: Dockerfile
      target: mock-publisher
    container_name: fleet_mock_publisher
    environment:
      MQTT_BROKER: tcp://mosquitto:1883
      PUBLISH_INTERVAL: 2s
      VEHICLE_IDS: B1234XYZ,B5678ABC,B9012DEF
    depends_on:
      mosquitto:
        condition: service_started
    networks:
      - fleet_network
    profiles:
      - testing  # Only run when testing profile is active

volumes:
  postgres_data:
  mosquitto_data:
  mosquitto_log:
  rabbitmq_data:

networks:
  fleet_network:
    driver: bridge